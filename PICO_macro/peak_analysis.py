import ROOT
from array import array
import optparse
from utils import *
import os
from scipy.signal import find_peaks
import numpy as np
from peak import *

def simultaneous_analysis(peaksG3B, ig3t, ig2b, ig2t, ig1t, ig1b, vg3t, vg2b, vg2t, vg1b, vg1t, outfile, delta_t = 10000):  #delta_t=10000s
    # starting from peaksG3B -> max prob discharges
    i = 0
    prev_t_peak = 0
    for p in peaksG3B:
        
        entry_pg3b = p.entry
        time_pg3b = p.time
        times = p.t_array
        pnt_to_eof = len(ig3t) - entry_pg3b
        outfile.cd()
        
        if p.t_peak==prev_t_peak : i+=1
        elif p.t_peak != prev_t_peak : i = 0
        
        outfile.mkdir("peak_"+str(p.t_peak)+"_"+str(i))
        if entry_pg3b<250:
            entry_start = 0
            entry_stop = entry_pg3b*2
            gr_curr_g3b = p.graph_peak(pnt_to_plot = entry_pg3b*2)
            gr_volt_g3b = p.graph_voltage(pnt_to_plot = entry_pg3b*2)
        elif pnt_to_eof < 250:
            entry_start = entry_pg3b - pnt_to_eof
            entry_stop = len(ig3t)
            gr_curr_g3b = p.graph_peak(pnt_to_plot = pnt_to_eof*2)
            gr_volt_g3b = p.graph_voltage(pnt_to_plot = pnt_to_eof*2)
        else:
            entry_start = entry_pg3b - 250
            entry_stop = entry_pg3b + 250
            gr_curr_g3b = p.graph_peak(pnt_to_plot = 500)
            gr_volt_g3b = p.graph_voltage(pnt_to_plot = 500)
        
        if entry_stop > len(vg3t): entry_stop_volt = len(vg3t)
        else: entry_stop_volt = entry_stop
        gr_curr_g3b.SetTitle("G3B current")
        gr_volt_g3b.SetTitle("G3B voltage")
        gr_curr_g3b.SetName("G3B_current")
        gr_volt_g3b.SetName("G3B_voltage")

        gr_curr_g3t = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], ig3t[entry_start:entry_stop])
        gr_curr_g3t.SetName("G3T_current")
        gr_curr_g3t.SetTitle("G3T current")
        gr_curr_g3t.SetMarkerStyle(20)
        gr_curr_g3t.GetXaxis().SetTitle("time (s)")
        gr_curr_g3t.GetYaxis().SetTitle("current (nA)")
        gr_volt_g3t = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], vg3t[entry_start:entry_stop_volt])
        gr_volt_g3t.SetName("G3T_voltage")
        gr_volt_g3t.SetTitle("G3T voltage")
        gr_volt_g3t.SetMarkerStyle(20)
        gr_volt_g3t.GetXaxis().SetTitle("time (s)")
        gr_volt_g3t.GetYaxis().SetTitle("voltage (V)")

        gr_curr_g2b = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], ig2b[entry_start:entry_stop])
        gr_curr_g2b.SetName("G2B_current")
        gr_curr_g2b.SetTitle("G2B current")
        gr_curr_g2b.SetMarkerStyle(20)
        gr_curr_g2b.GetXaxis().SetTitle("time (s)")
        gr_curr_g2b.GetYaxis().SetTitle("current (nA)")
        gr_volt_g2b = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], vg2b[entry_start:entry_stop_volt])
        gr_volt_g2b.SetName("G2B_voltage")
        gr_volt_g2b.SetTitle("G2B voltage")
        gr_volt_g2b.GetXaxis().SetTitle("time (s)")
        gr_volt_g2b.GetYaxis().SetTitle("voltage (V)")
        
        gr_curr_g2t = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], ig2t[entry_start:entry_stop])
        gr_curr_g2t.SetName("G2T_current")
        gr_curr_g2t.SetTitle("G2T current")
        gr_curr_g2t.SetMarkerStyle(20)
        gr_curr_g2t.GetXaxis().SetTitle("time (s)")
        gr_curr_g2t.GetYaxis().SetTitle("current (n A)")
        gr_volt_g2t = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], vg2t[entry_start:entry_stop_volt])
        gr_volt_g2t.SetName("G2T_voltage")
        gr_volt_g2t.SetTitle("G2T voltage")
        gr_volt_g2t.GetXaxis().SetTitle("time (s)")
        gr_volt_g2t.GetYaxis().SetTitle("voltage (V)")

        gr_curr_g1b = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], ig1b[entry_start:entry_stop])
        gr_curr_g1b.SetName("G1B_current")
        gr_curr_g1b.SetTitle("G1B current")
        gr_curr_g1b.SetMarkerStyle(20)
        gr_curr_g1b.GetXaxis().SetTitle("time (s)")
        gr_curr_g1b.GetYaxis().SetTitle("current (nA)")
        gr_volt_g1b = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], vg1b[entry_start:entry_stop_volt])
        gr_volt_g1b.SetName("G1B_voltage") 
        gr_volt_g1b.SetTitle("G1B voltage")
        gr_volt_g1b.SetMarkerStyle(20)
        gr_volt_g1b.GetXaxis().SetTitle("time (s)")
        gr_volt_g1b.GetYaxis().SetTitle("voltage (V)")

        gr_curr_g1t = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], ig1t[entry_start:entry_stop])
        gr_curr_g1t.SetName("G1T_current")
        gr_curr_g1t.SetTitle("G1T current")
        gr_curr_g1t.SetMarkerStyle(20)
        gr_curr_g1t.GetXaxis().SetTitle("time (s)")
        gr_curr_g1t.GetYaxis().SetTitle("current (nA)")
        gr_volt_g1t = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], vg1t[entry_start:entry_stop_volt])
        gr_volt_g1t.SetName("G1T_voltage") 
        gr_volt_g1t.SetTitle("G1T voltage")
        gr_volt_g1t.SetMarkerStyle(20)
        gr_volt_g1t.GetXaxis().SetTitle("time (s)")
        gr_volt_g1t.GetYaxis().SetTitle("voltage (V)")
        
        gr_curr_drift = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], idrift[entry_start:entry_stop])
        gr_curr_drift.SetName("DRIFT_current")
        gr_curr_drift.SetTitle("DRIFT current")
        gr_curr_drift.SetMarkerStyle(20)
        gr_curr_drift.GetXaxis().SetTitle("time (s)")
        gr_curr_drift.GetYaxis().SetTitle("current (nA)")
        gr_volt_drift = ROOT.TGraph(entry_stop-entry_start, times[entry_start: entry_stop], vdrift[entry_start:entry_stop_volt])
        gr_volt_drift.SetName("DRIFT_voltage") 
        gr_volt_drift.SetTitle("DRIFT voltage")
        gr_volt_drift.SetMarkerStyle(20)
        gr_volt_drift.GetXaxis().SetTitle("time (s)")
        gr_volt_drift.GetYaxis().SetTitle("voltage (V)")
        
        outfile.cd("peak_"+str(p.t_peak)+"_"+str(i))
        gr_curr_drift.Write()
        gr_volt_drift.Write()
        gr_curr_g3b.Write()
        gr_volt_g3b.Write()
        gr_curr_g3t.Write()
        gr_volt_g3t.Write()
        gr_curr_g2b.Write()
        gr_volt_g2b.Write()
        gr_curr_g2t.Write()
        gr_volt_g2t.Write()
        gr_curr_g1b.Write()
        gr_volt_g1b.Write()
        gr_curr_g1t.Write()
        gr_volt_g1t.Write()

        prev_t_peak=p.t_peak

def fit_hist(hist, array):
    print("fitting "+ hist.GetName())
    hist_to_fit = hist.Clone()
    g = ROOT.TF1("g", "gaus", min(array), max(array))
    hist_to_fit.Fit(g)
    mean, sigma = g.GetParameter(1), g.GetParameter(2)
    delta = mean +3*sigma
    print(delta)
    return mean, sigma

def peak_counter(hist, heights, n_bin, outfile, folder):
    for h in heights:
        if h < 50000: 
            hist.AddBinContent(hist.FindBin(h), 1)
        else: 
            hist.AddBinContent(n_bin, 1)
        
    outfile.cd()
    hist.Write()
    c1 = ROOT.TCanvas(hist.GetName(), "c1")
    hist.Draw()
    c1.SetLogy()
    c1.SetLogx()
    c1.Print(folder+"/"+hist.GetName()+".png")
    c1.Print(folder+"/"+hist.GetName()+".root")
    

ROOT.gStyle.SetOptStat("emr")
ROOT.gROOT.SetBatch()

usage = 'python peak_analysis.py' # -f Goliath -i PICO*_run_00**
parser = optparse.OptionParser(usage)
parser.add_option('-f', '--folder', dest='folder', type='string', default = '/eos/home-a/adeiorio/GEM/Goliath/', help='Default folder is /eos/home-a/adeiorio/GEM/Goliath')
parser.add_option('-i', '--input', dest='input', type='string', default = 'PICO1_run0001', help="Enter an input root file")
parser.add_option('-p', '--peakfinder', dest='findpeak', default = False, action='store_true', help = "Default do not use find peaks")
(opt, args) = parser.parse_args()

#/eos/home-a/adeiorio/GEM/Goliath
folder = opt.folder
infile = ROOT.TFile.Open(folder + '/' + opt.input+'.root')
print("input file :", infile)
tree = infile.Get("t1")
entries = tree.GetEntries()
run_label = opt.input
outfolder = "/eos/user/a/acagnott/GEM_plot/"+ run_label
if not os.path.exists(outfolder):
    os.makedirs(outfolder)
outfile = ROOT.TFile.Open(outfolder+"/"+ run_label+".root", "RECREATE")
print("output file :", outfile)

print("entries:"+str(entries))

acquisition_rate = 380.
downscale = 1
acquisition_time = (1./acquisition_rate)*downscale #s

ig1t = array('f')
ig1b = array('f')
ig2t = array('f')
ig2b = array('f')
ig3t = array('f')
ig3b = array('f')
idrift = array('f')
m_ig1t = array('f')
m_ig1b = array('f')
m_ig2t = array('f')
m_ig2b = array('f')
m_ig3t = array('f')
m_ig3b = array('f')
m_idrift = array('f')
vg1t = array('f')
vg1b = array('f')
vg2t = array('f')
vg2b = array('f')
vg3t_ = array('f')
vg3t = array('f')
vg3b = array('f')
vdrift = array('f')
deltav_drg1t = array('f')
deltav_g1tg1b = array('f')
deltav_g1bg2t = array('f')
deltav_g2tg2b = array('f')
deltav_g2bg3t = array('f')
deltav_g3tg3b = array('f')
time_c = array('f')
time_v = array('f')
time_current = array('f')
time_voltage = array('f')

nbins_current = 100
xmin_current = -50.
xmax_current = 50.
curr_ig3t_distr = ROOT.TH1F("curr_ig3t_distr", "G3T current distribution", nbins_current, xmin_current, xmax_current)
curr_ig2t_distr = ROOT.TH1F("curr_ig2t_distr", "G2T current distribution", nbins_current, xmin_current, xmax_current)
curr_ig1t_distr = ROOT.TH1F("curr_ig1t_distr", "G1T current distribution", nbins_current, xmin_current, xmax_current)
curr_ig3b_distr = ROOT.TH1F("curr_ig3b_distr", "G3B current distribution", nbins_current, xmin_current, xmax_current)
curr_ig2b_distr = ROOT.TH1F("curr_ig2b_distr", "G2B current distribution", nbins_current, xmin_current, xmax_current)
curr_ig1b_distr = ROOT.TH1F("curr_ig1b_distr", "G1B current distribution", nbins_current, xmin_current, xmax_current)
curr_idrift_distr = ROOT.TH1F("curr_idrift_distr", "DRIFT current distribution", nbins_current, xmin_current, xmax_current)

curr_m_ig3t_distr = ROOT.TH1F("curr_m_ig3t_distr", "G3T current distribution", nbins_current, xmin_current, xmax_current)
curr_m_ig2t_distr = ROOT.TH1F("curr_m_ig2t_distr", "G2T current distribution", nbins_current, xmin_current, xmax_current)
curr_m_ig1t_distr = ROOT.TH1F("curr_m_ig1t_distr", "G1T current distribution", nbins_current, xmin_current, xmax_current)
curr_m_ig3b_distr = ROOT.TH1F("curr_m_ig3b_distr", "G3B current distribution", nbins_current, xmin_current, xmax_current)
curr_m_ig2b_distr = ROOT.TH1F("curr_m_ig2b_distr", "G2B current distribution", nbins_current, xmin_current, xmax_current)
curr_m_ig1b_distr = ROOT.TH1F("curr_m_ig1b_distr", "G1B current distribution", nbins_current, xmin_current, xmax_current)
curr_m_idrift_distr = ROOT.TH1F("curr_m_idrift_distr", "DRIFT current distribution", nbins_current, xmin_current, xmax_current)

#entries = 50000
for i in range(1, entries):
    tree.GetEntry(i)
    
    ig3b.append(tree.I_G3B)
    ig3t.append(tree.I_G3T)
    ig2t.append(tree.I_G2T)
    ig2b.append(tree.I_G2B)
    ig1t.append(tree.I_G1T)
    ig1b.append(tree.I_G1B)
    idrift.append(tree.I_drift)

    m_ig3b.append(-tree.I_G3B)
    m_ig3t.append(-tree.I_G3T)
    m_ig2t.append(-tree.I_G2T)
    m_ig2b.append(-tree.I_G2B)
    m_ig1t.append(-tree.I_G1T)
    m_ig1b.append(-tree.I_G1B)
    m_idrift.append(-tree.I_drift)

    time_current.append(i* acquisition_time) 
    
    curr_ig3t_distr.Fill(tree.I_G3T)
    curr_ig3b_distr.Fill(tree.I_G3B)
    curr_ig2t_distr.Fill(tree.I_G2T)
    curr_ig2b_distr.Fill(tree.I_G2B)
    curr_ig1t_distr.Fill(tree.I_G1T)
    curr_ig1b_distr.Fill(tree.I_G1B)
    curr_idrift_distr.Fill(tree.I_drift)

    curr_m_ig3t_distr.Fill(-tree.I_G3T)
    curr_m_ig3b_distr.Fill(-tree.I_G3B)
    curr_m_ig2t_distr.Fill(-tree.I_G2T)
    curr_m_ig2b_distr.Fill(-tree.I_G2B)
    curr_m_ig1t_distr.Fill(-tree.I_G1T)
    curr_m_ig1b_distr.Fill(-tree.I_G1B)
    curr_m_idrift_distr.Fill(-tree.I_drift)
    
    if (tree.V_G3T<10000 and i > 10) :
        vdrift.append(tree.V_drift)
        vg1t.append(tree.V_G1T)
        vg1b.append(tree.V_G1B)
        vg2t.append(tree.V_G2T)
        vg2b.append(tree.V_G2B)
        vg3t.append(tree.V_G3T)
        vg3b.append(tree.V_G3B)
        deltav_drg1t.append(tree.V_drift-tree.V_G1T)
        deltav_g1tg1b.append(tree.V_G1T-tree.V_G1B)
        deltav_g1bg2t.append(tree.V_G1B-tree.V_G2T)
        deltav_g2tg2b.append(tree.V_G2T-tree.V_G2B)
        deltav_g2bg3t.append(tree.V_G2B-tree.V_G3T)
        deltav_g3tg3b.append(tree.V_G3T-tree.V_G3B)
        time_voltage.append(i* acquisition_time)
       
nbins_voltage = 100
volt_g3t_distr = ROOT.TH1F("volt_g3t_distr", "G3T voltage distribution", nbins_voltage, min(vg3t), max(vg3t))
volt_g2t_distr = ROOT.TH1F("volt_g2t_distr", "G2T voltage distribution", nbins_voltage, min(vg2t), max(vg2t))
volt_g1t_distr = ROOT.TH1F("volt_g1t_distr", "G1T voltage distribution", nbins_voltage, min(vg1t), max(vg1t))
volt_g3b_distr = ROOT.TH1F("volt_g3b_distr", "G3B voltage distribution", nbins_voltage, min(vg3b), max(vg3b))
volt_g2b_distr = ROOT.TH1F("volt_g2b_distr", "G2B voltage distribution", nbins_voltage, min(vg2b), max(vg2b))
volt_g1b_distr = ROOT.TH1F("volt_g1b_distr", "G1B voltage distribution", nbins_voltage, min(vg1b), max(vg1b))
volt_drift_distr = ROOT.TH1F("volt_drift_distr", "DRIFT voltage distribution", nbins_voltage, min(vdrift), max(vdrift))

for i in range(len(vg3t)):
    volt_g3t_distr.Fill(vg3t[i])
    volt_g3b_distr.Fill(vg3b[i])
    volt_g2t_distr.Fill(vg2t[i])
    volt_g2b_distr.Fill(vg2b[i])
    volt_g1t_distr.Fill(vg1t[i])
    volt_g1b_distr.Fill(vg1b[i])
    volt_drift_distr.Fill(vdrift[i])

print_hist(outfolder, curr_ig3t_distr.Clone(), "IG3T_current_distribution", "HIST")    
curr_ig3t_distr.Write()
print_hist(outfolder, curr_ig3b_distr.Clone(), "IG3B_current_distribution", "HIST")    
curr_ig3b_distr.Write()
print_hist(outfolder, curr_ig2t_distr.Clone(), "IG2T_current_distribution", "HIST")
curr_ig2t_distr.Write()
print_hist(outfolder, curr_ig2b_distr.Clone(), "IG2B_current_distribution", "HIST")    
curr_ig2b_distr.Write()
print_hist(outfolder, curr_ig1t_distr.Clone(), "IG1T_current_distribution", "HIST")    
curr_ig1t_distr.Write()
print_hist(outfolder, curr_ig1b_distr.Clone(), "IG1B_current_distribution", "HIST")    
curr_ig1b_distr.Write()
print_hist(outfolder, curr_idrift_distr.Clone(), "IDRIFT_current_distribution", "HIST")
curr_idrift_distr.Write()


volt_g3t_distr.Write()
print_hist(outfolder, volt_g3t_distr.Clone(), "G3T_voltage_distribution", "HIST")
volt_g3b_distr.Write()
print_hist(outfolder, volt_g3b_distr.Clone(), "G3B_voltage_distribution", "HIST")
volt_g2t_distr.Write()
print_hist(outfolder, volt_g2t_distr.Clone(), "G2T_voltage_distribution", "HIST")
volt_g2b_distr.Write()
print_hist(outfolder, volt_g2b_distr.Clone(), "G2B_voltage_distribution", "HIST")
volt_g1t_distr.Write()
print_hist(outfolder, volt_g1t_distr.Clone(), "G1T_voltage_distribution", "HIST")
volt_g1b_distr.Write()
print_hist(outfolder, volt_g1b_distr.Clone(), "G1B_voltage_distribution", "HIST")
volt_drift_distr.Write()
print_hist(outfolder, volt_drift_distr.Clone(), "DRIFT_voltage_distribution", "HIST")


gr_idrift = ROOT.TGraph(len(time_current), time_current, idrift)
gr_idrift.SetName("gr_idrift")
gr_idrift.SetTitle("I drift")
gr_idrift.GetXaxis().SetTitle("time (s)")
gr_idrift.GetYaxis().SetTitle("current (nA)")
gr_idrift.SetMarkerColor(ROOT.kBlack)
gr_idrift.SetMarkerStyle(7)
gr_ig1t = ROOT.TGraph(len(time_current), time_current, ig1t) 
gr_ig1t.SetName("gr_ig1t")
gr_ig1t.SetTitle("I g1t")
gr_ig1t.GetXaxis().SetTitle("time (s)")
gr_ig1t.GetYaxis().SetTitle("current (nA)")
gr_ig1t.SetMarkerColor(ROOT.kGreen)
gr_ig1t.SetMarkerStyle(7)
gr_ig1b = ROOT.TGraph(len(time_current), time_current, ig1b) 
gr_ig1b.SetName("gr_ig1b")
gr_ig1b.SetTitle("I g1b")
gr_ig1b.GetXaxis().SetTitle("time (s)")
gr_ig1b.GetYaxis().SetTitle("current (nA)")
gr_ig1b.SetMarkerColor(ROOT.kGreen+3)
gr_ig1b.SetMarkerStyle(7)
gr_ig2t = ROOT.TGraph(len(time_current), time_current, ig2t) 
gr_ig2t.SetName("gr_ig2t")
gr_ig2t.SetTitle("I g2t")
gr_ig2t.GetXaxis().SetTitle("time (s)")
gr_ig2t.GetYaxis().SetTitle("current (nA)")
gr_ig2t.SetMarkerColor(ROOT.kCyan)
gr_ig2t.SetMarkerStyle(7)
gr_ig2b = ROOT.TGraph(len(time_current), time_current, ig2b) 
gr_ig2b.SetName("gr_ig2b")
gr_ig2b.SetTitle("I g2b")
gr_ig2b.GetXaxis().SetTitle("time (s)")
gr_ig2b.GetYaxis().SetTitle("current (nA)")
gr_ig2b.SetMarkerColor(ROOT.kCyan+3)
gr_ig2b.SetMarkerStyle(7)
gr_ig3t = ROOT.TGraph(len(time_current), time_current, ig3t) 
gr_ig3t.SetName("gr_ig3t")
gr_ig3t.SetTitle("I g3t")
gr_ig3t.GetXaxis().SetTitle("time (s)")
gr_ig3t.GetYaxis().SetTitle("current (nA)")
gr_ig3t.SetMarkerColor(ROOT.kRed)
gr_ig3t.SetMarkerStyle(7)
gr_ig3b = ROOT.TGraph(len(time_current), time_current, ig3b) 
gr_ig3b.SetName("gr_ig3b")
gr_ig3b.SetTitle("I g3b")
gr_ig3b.GetXaxis().SetTitle("time (s)")
gr_ig3b.GetYaxis().SetTitle("current (nA)")
gr_ig3b.SetMarkerColor(ROOT.kRed+3)
gr_ig3b.SetMarkerStyle(7)


gr_idrift.Write() 
print_hist(outfolder, gr_idrift.Clone(), "Idrift_time", "AL*")    
gr_ig1t.Write() 
print_hist(outfolder, gr_ig1t.Clone(), "Ig1t_time", "AL*")
gr_ig1b.Write() 
print_hist(outfolder, gr_ig1b.Clone(), "Ig1b_time", "AL*")
gr_ig2t.Write() 
print_hist(outfolder, gr_ig2t.Clone(), "Ig2t_time", "AL*")
gr_ig2b.Write() 
print_hist(outfolder, gr_ig2b.Clone(), "Ig2b_time", "AL*")
gr_ig3t.Write() 
print_hist(outfolder, gr_ig3t.Clone(), "Ig3t_time", "AL*")
gr_ig3b.Write()
print_hist(outfolder, gr_ig3b.Clone(), "Ig3b_time", "AL*")

all_current = [gr_idrift.Clone(), gr_ig1t.Clone(), gr_ig1b.Clone(), gr_ig2t.Clone(), gr_ig2b.Clone(), gr_ig3t.Clone(), gr_ig3b.Clone()]
print_hist(outfolder, all_current, 'All_currents', "AL*")

gr_m_idrift = ROOT.TGraph(len(time_current), time_current, m_idrift) 
gr_m_idrift.SetName("gr_m_idrift")
gr_m_idrift.SetTitle("-I drift")
gr_m_idrift.GetXaxis().SetTitle("time (s)")
gr_m_idrift.GetYaxis().SetTitle("current (nA)")
gr_m_idrift.SetMarkerStyle(7)
gr_m_ig1t = ROOT.TGraph(len(time_current), time_current, m_ig1t) 
gr_m_ig1t.SetName("gr_m_ig1t")
gr_m_ig1t.SetTitle("-I g1t")
gr_m_ig1t.GetXaxis().SetTitle("time (s)")
gr_m_ig1t.GetYaxis().SetTitle("current (nA)")
gr_m_ig1t.SetMarkerStyle(7)
gr_m_ig1b = ROOT.TGraph(len(time_current), time_current, m_ig1b) 
gr_m_ig1b.SetName("gr_m_ig1b")
gr_m_ig1b.SetTitle("-I g1b")
gr_m_ig1b.GetXaxis().SetTitle("time (s)")
gr_m_ig1b.GetYaxis().SetTitle("current (nA)")
gr_m_ig1b.SetMarkerStyle(7)
gr_m_ig2t = ROOT.TGraph(len(time_current), time_current, m_ig2t) 
gr_m_ig2t.SetName("gr_m_ig2t")
gr_m_ig2t.SetTitle("-I g2t")
gr_m_ig2t.GetXaxis().SetTitle("time (s)")
gr_m_ig2t.GetYaxis().SetTitle("current (nA)")
gr_m_ig2t.SetMarkerStyle(7)
gr_m_ig2b = ROOT.TGraph(len(time_current), time_current, m_ig2b) 
gr_m_ig2b.SetName("gr_m_ig2b")
gr_m_ig2b.SetTitle("-I g2b")
gr_m_ig2b.GetXaxis().SetTitle("time (s)")
gr_m_ig2b.GetYaxis().SetTitle("current (nA)")
gr_m_ig2b.SetMarkerStyle(7)
gr_m_ig3t = ROOT.TGraph(len(time_current), time_current, m_ig3t) 
gr_m_ig3t.SetName("gr_m_ig3t")
gr_m_ig3t.SetTitle("-I g3t")
gr_m_ig3t.GetXaxis().SetTitle("time (s)")
gr_m_ig3t.GetYaxis().SetTitle("current (nA)")
gr_m_ig3t.SetMarkerStyle(7)
gr_m_ig3b = ROOT.TGraph(len(time_current), time_current, m_ig3b) 
gr_m_ig3b.SetName("gr_m_ig3b")
gr_m_ig3b.SetTitle("-I g3b")
gr_m_ig3b.GetXaxis().SetTitle("time (s)")
gr_m_ig3b.GetYaxis().SetTitle("current (nA)")
gr_m_ig3b.SetMarkerStyle(7)
gr_m_idrift.Write() 
print_hist(outfolder, gr_m_idrift, "m_Idrift_time", "AL*")    
gr_m_ig1t.Write() 
print_hist(outfolder, gr_m_ig1t, "m_Ig1t_time", "AL*")
gr_m_ig1b.Write() 
print_hist(outfolder, gr_m_ig1b, "m_Ig1b_time", "AL*")
gr_m_ig2t.Write() 
print_hist(outfolder, gr_m_ig2t, "m_Ig2t_time", "AL*")
gr_m_ig2b.Write() 
print_hist(outfolder, gr_m_ig2b, "m_Ig2b_time", "AL*")
gr_m_ig3t.Write() 
print_hist(outfolder, gr_m_ig3t, "m_Ig3t_time", "AL*")
gr_m_ig3b.Write()
print_hist(outfolder, gr_m_ig3b, "m_Ig3b_time", "AL*")

gr_vdrift = ROOT.TGraph(len(time_voltage), time_voltage, vdrift)
gr_vdrift.SetName("gr_vdrift")
gr_vdrift.SetMarkerStyle(7)
gr_vdrift.SetTitle("V drift")
gr_vdrift.GetXaxis().SetTitle("time (s)")
gr_vdrift.GetYaxis().SetTitle("voltage (V)")
gr_vdrift.SetMarkerColor(ROOT.kBlack)
gr_vg1t = ROOT.TGraph(len(time_voltage), time_voltage, vg1t) 
gr_vg1t.SetName("gr_vg1t")
gr_vg1t.SetMarkerStyle(7)
gr_vg1t.SetTitle("V G1T")
gr_vg1t.GetXaxis().SetTitle("time (s)")
gr_vg1t.GetYaxis().SetTitle("voltage (V)")
gr_vg1t.SetMarkerColor(ROOT.kGreen)
gr_vg1b = ROOT.TGraph(len(time_voltage), time_voltage, vg1b) 
gr_vg1b.SetName("gr_vg1b")
gr_vg1b.SetMarkerStyle(7)
gr_vg1b.SetTitle("V G1B")
gr_vg1b.GetXaxis().SetTitle("time (s)")
gr_vg1b.GetYaxis().SetTitle("voltage (V)")
gr_vg1b.SetMarkerColor(ROOT.kGreen+3)
gr_vg2t = ROOT.TGraph(len(time_voltage), time_voltage, vg2t) 
gr_vg2t.SetName("gr_vg2t")
gr_vg2t.SetMarkerStyle(7)
gr_vg2t.SetTitle("V G2T")
gr_vg2t.GetXaxis().SetTitle("time (s)")
gr_vg2t.GetYaxis().SetTitle("voltage (V)")
gr_vg2t.SetMarkerColor(ROOT.kCyan)
gr_vg2b = ROOT.TGraph(len(time_voltage), time_voltage, vg2b) 
gr_vg2b.SetName("gr_vg2b")
gr_vg2b.SetMarkerStyle(7)
gr_vg2b.SetTitle("V G2B")
gr_vg2b.GetXaxis().SetTitle("time (s)")
gr_vg2b.GetYaxis().SetTitle("voltage (V)")
gr_vg2b.SetMarkerColor(ROOT.kCyan+3)
gr_vg3t = ROOT.TGraph(len(time_voltage), time_voltage, vg3t) 
gr_vg3t.SetName("gr_vg3t")
gr_vg3t.SetMarkerStyle(7)
gr_vg3t.SetTitle("V G3T")
gr_vg3t.GetXaxis().SetTitle("time (s)")
gr_vg3t.GetYaxis().SetTitle("voltage (V)")
gr_vg3t.SetMarkerColor(ROOT.kRed)
gr_vg3b = ROOT.TGraph(len(time_voltage), time_voltage, vg3b) 
gr_vg3b.SetName("gr_vg3b")
gr_vg3b.SetMarkerStyle(7)
gr_vg3b.SetTitle("V G3B")
gr_vg3b.GetXaxis().SetTitle("time (s)")
gr_vg3b.GetYaxis().SetTitle("voltage (V)")
gr_vg3b.SetMarkerColor(ROOT.kRed+3)


gr_vdrift.Write() 
print_hist(outfolder, gr_vdrift, "Vdrift_time", "AL*")    
gr_vg1t.Write() 
print_hist(outfolder, gr_vg1t, "VG1t_time", "AL*")
gr_vg1b.Write() 
print_hist(outfolder, gr_vg1b, "Vg1b_time", "AL*")
gr_vg2t.Write() 
print_hist(outfolder, gr_vg2t, "Vg2t_time", "AL*")
gr_vg2b.Write() 
print_hist(outfolder, gr_vg2b, "Vg2b_time", "AL*")
gr_vg3t.Write() 
print_hist(outfolder, gr_vg3t, "Vg3t_time", "AL*")
gr_vg3b.Write()
print_hist(outfolder, gr_vg3b, "Vg3b_time", "AL*")

all_voltages = [gr_vdrift.Clone(), gr_vg1t.Clone(), gr_vg1b.Clone(), gr_vg2t.Clone(), gr_vg2b.Clone(), gr_vg3t.Clone(), gr_vg3b.Clone()]
print_hist(outfolder, all_voltages, 'All_voltages', "AL*")

gr_deltav_drg1t = ROOT.TGraph(len(time_voltage), time_voltage, deltav_drg1t)
gr_deltav_drg1t.SetName("gr_deltav_grg1t")
gr_deltav_drg1t.SetMarkerStyle(7)
gr_deltav_drg1t.SetTitle("#Delta V (drift-G1T)")
gr_deltav_drg1t.GetXaxis().SetTitle("time (s)")
gr_deltav_drg1t.GetYaxis().SetTitle("voltage (V)")
gr_deltav_drg1t.SetMarkerColor(ROOT.kBlack)
gr_deltav_g1tg1b = ROOT.TGraph(len(time_voltage), time_voltage, deltav_g1tg1b) 
gr_deltav_g1tg1b.SetName("gr_deltav_g1tg1b")
gr_deltav_g1tg1b.SetMarkerStyle(7)
gr_deltav_g1tg1b.SetTitle("#Delta V (G1T-G1B)")
gr_deltav_g1tg1b.GetXaxis().SetTitle("time (s)")
gr_deltav_g1tg1b.GetYaxis().SetTitle("voltage (V)")
gr_deltav_g1tg1b.SetMarkerColor(ROOT.kGreen)
gr_deltav_g1bg2t = ROOT.TGraph(len(time_voltage), time_voltage, deltav_g1bg2t) 
gr_deltav_g1bg2t.SetName("gr_deltav_g1bg2t")
gr_deltav_g1bg2t.SetMarkerStyle(7)
gr_deltav_g1bg2t.SetTitle("#Delta V (G1B-G2T)")
gr_deltav_g1bg2t.GetXaxis().SetTitle("time (s)")
gr_deltav_g1bg2t.GetYaxis().SetTitle("voltage (V)")
gr_deltav_g1bg2t.SetMarkerColor(ROOT.kGreen+3)
gr_deltav_g2tg2b = ROOT.TGraph(len(time_voltage), time_voltage, deltav_g2tg2b) 
gr_deltav_g2tg2b.SetName("gr_deltav_g2tg2b")
gr_deltav_g2tg2b.SetMarkerStyle(7)
gr_deltav_g2tg2b.SetTitle("#Delta V (G2T-G2B)")
gr_deltav_g2tg2b.GetXaxis().SetTitle("time (s)")
gr_deltav_g2tg2b.GetYaxis().SetTitle("voltage (V)")
gr_deltav_g2tg2b.SetMarkerColor(ROOT.kBlue)
gr_deltav_g2bg3t = ROOT.TGraph(len(time_voltage), time_voltage, deltav_g2bg3t) 
gr_deltav_g2bg3t.SetName("gr_deltav_g2bg3t")
gr_deltav_g2bg3t.SetMarkerStyle(7)
gr_deltav_g2bg3t.SetTitle("#Delta V (G2B-G3T)")
gr_deltav_g2bg3t.GetXaxis().SetTitle("time (s)")
gr_deltav_g2bg3t.GetYaxis().SetTitle("voltage (V)")
gr_deltav_g2bg3t.SetMarkerColor(ROOT.kCyan)
gr_deltav_g3tg3b = ROOT.TGraph(len(time_voltage), time_voltage, deltav_g3tg3b) 
gr_deltav_g3tg3b.SetName("gr_deltav_g3tg3b")
gr_deltav_g3tg3b.SetMarkerStyle(7)
gr_deltav_g3tg3b.SetTitle("#Delta V (G3T-G3B)")
gr_deltav_g3tg3b.GetXaxis().SetTitle("time (s)")
gr_deltav_g3tg3b.GetYaxis().SetTitle("voltage (V)")
gr_deltav_g3tg3b.SetMarkerColor(ROOT.kRed)

all_deltaV = [gr_deltav_drg1t.Clone(), gr_deltav_g1tg1b.Clone(), gr_deltav_g1bg2t.Clone(), gr_deltav_g2tg2b.Clone(), gr_deltav_g2bg3t.Clone(), gr_deltav_g3tg3b.Clone()]
print_hist(outfolder, all_deltaV, 'All_deltaV', "AL*")


#nei run senza accensione o spegnimento delle gem

if opt.findpeak :
    distance = 1  # 1 secondi 
    height = 3000
    mean_ig1t, sigma_ig1t = fit_hist(curr_ig1t_distr, ig1t)
    mean_ig1b, sigma_ig1b = fit_hist(curr_ig1b_distr, ig1b)
    mean_ig2t, sigma_ig2t = fit_hist(curr_ig2t_distr, ig2t)
    mean_ig2b, sigma_ig2b = fit_hist(curr_ig2b_distr, ig2b)
    mean_ig3t, sigma_ig3t = fit_hist(curr_ig3t_distr, ig3t)
    mean_ig3b, sigma_ig3b = fit_hist(curr_ig3b_distr, ig3b)
    mean_idrift, sigma_idrift = fit_hist(curr_idrift_distr, idrift)
    mean_m_ig1t, sigma_m_ig1t = fit_hist(curr_m_ig1t_distr, m_ig1t)
    mean_m_ig1b, sigma_m_ig1b = fit_hist(curr_m_ig1b_distr, m_ig1b)
    mean_m_ig2t, sigma_m_ig2t = fit_hist(curr_m_ig2t_distr, m_ig2t)
    mean_m_ig2b, sigma_m_ig2b = fit_hist(curr_m_ig2b_distr, m_ig2b)
    mean_m_ig3t, sigma_m_ig3t = fit_hist(curr_m_ig3t_distr, m_ig3t)
    mean_m_ig3b, sigma_m_ig3b = fit_hist(curr_m_ig3b_distr, m_ig3b)
    mean_m_idrift, sigma_m_idrift = fit_hist(curr_m_idrift_distr, m_idrift)

    '''
    peaks_ig1t, properties_ig1t = find_peaks(ig1t, height = height, distance = distance)
    peaks_ig1b, properties_ig1b = find_peaks(ig1b, height = height, distance = distance)
    peaks_ig2t, properties_ig2t = find_peaks(ig2t, height = height, distance = distance)
    peaks_ig2b, properties_ig2b = find_peaks(ig2b, height = height, distance = distance)
    peaks_ig3t, properties_ig3t = find_peaks(ig3t, height = height, distance= distance)
    peaks_ig3b, properties_ig3b = find_peaks(ig3b, height = height, distance = distance)
    peaks_idrift, properties_idrift = find_peaks(idrift, height = height, distance = distance)
    peaks_m_ig1t, properties_m_ig1t = find_peaks(m_ig1t, height = height, distance = distance)
    peaks_m_ig1b, properties_m_ig1b = find_peaks(m_ig1b, height = height, distance = distance)
    peaks_m_ig2t, properties_m_ig2t = find_peaks(m_ig2t, height = height, distance = distance)
    peaks_m_ig2b, properties_m_ig2b = find_peaks(m_ig2b, height = height, distance = distance)
    peaks_m_ig3t, properties_m_ig3t = find_peaks(m_ig3t, height = height, distance= distance)
    peaks_m_ig3b, properties_m_ig3b = find_peaks(m_ig3b, height = height, distance = distance)
    peaks_m_idrift, properties_m_idrift = find_peaks(idrift, height = height, distance = distance)
    '''
    f = open(outfolder+"/"+run_label+"_peakproperties.txt", "w")
    peaks_ig1t, properties_ig1t = find_peaks(ig1t, height = mean_ig1t+3*sigma_ig1t, distance = distance)
    peaks_ig1b, properties_ig1b = find_peaks(ig1b, height = mean_ig1b+3*sigma_ig1b, distance = distance)
    peaks_ig2t, properties_ig2t = find_peaks(ig2t, height = mean_ig2t+3*sigma_ig2t, distance = distance)
    peaks_ig2b, properties_ig2b = find_peaks(ig2b, height = mean_ig2b+3*sigma_ig2b, distance = distance)
    peaks_ig3t, properties_ig3t = find_peaks(ig3t, height = mean_ig3t+3*sigma_ig3t, distance= distance)
    peaks_ig3b, properties_ig3b = find_peaks(ig3b, height = mean_ig3b+3*sigma_ig3b, distance = distance)
    peaks_idrift, properties_idrift = find_peaks(idrift, height = mean_idrift+3*sigma_idrift, distance = distance)
    peaks_m_ig1t, properties_m_ig1t = find_peaks(m_ig1t, height = mean_m_ig1t+3*sigma_m_ig1t, distance = distance)
    peaks_m_ig1b, properties_m_ig1b = find_peaks(m_ig1b, height = mean_m_ig1b+3*sigma_m_ig1b, distance = distance)
    peaks_m_ig2t, properties_m_ig2t = find_peaks(m_ig2t, height = mean_m_ig2t+3*sigma_m_ig2t, distance = distance)
    peaks_m_ig2b, properties_m_ig2b = find_peaks(m_ig2b, height = mean_m_ig2b+3*sigma_m_ig2b, distance = distance)
    peaks_m_ig3t, properties_m_ig3t = find_peaks(m_ig3t, height = mean_m_ig3t+3*sigma_m_ig3t, distance= distance)
    peaks_m_ig3b, properties_m_ig3b = find_peaks(m_ig3b, height = mean_m_ig3b+3*sigma_m_ig3b, distance = distance)
    peaks_m_idrift, properties_m_idrift = find_peaks(m_idrift, height = mean_m_idrift+3*sigma_m_idrift, distance = distance)
        
    f.write("DRIFT : " + str(peaks_idrift) + ' ' + str(properties_idrift))
    f.write("G1T : "+ str(peaks_ig1t) + ' ' + str( properties_ig1t))
    f.write("G1B : "+ str(peaks_ig1b) + ' ' + str( properties_ig1b))
    f.write("-G1T : "+ str(peaks_m_ig1t) + ' ' + str( properties_m_ig1t))
    f.write("-G1B : "+ str(peaks_m_ig1b) + ' ' + str( properties_m_ig1b))
    f.write("G2T : "+ str(peaks_ig2t) + ' ' + str( properties_ig2t))
    f.write("G2B : "+ str(peaks_ig2b) + ' ' + str( properties_ig2b))
    f.write("-G2T : "+ str(peaks_m_ig2t) + ' ' + str( properties_m_ig2t))
    f.write("-G2B : "+ str(peaks_m_ig2b) + ' ' + str( properties_m_ig2b))
    f.write("G3T : "+ str(peaks_ig3t) + ' ' + str( properties_ig3t))
    f.write("G3B : "+ str(peaks_ig3b) + ' ' + str( properties_ig3b))
    f.write("-G3T : "+ str(peaks_m_ig3t) + ' ' + str( properties_m_ig3t))
    f.write("-G3B : "+ str(peaks_m_ig3b) + ' ' + str( properties_m_ig3b))
    
    #peaksG3B = []
    #peak_m_G3B = []
    #for p in peaks_ig3b: peaksG3B.append(peak(entry = p, t_array = time_current, height = ig3b[p], i_array = ig3b, v_array = vg3b))
    #for p in peaks_m_ig3b: peaks_m_G3B.append(peak(entry = p, t_array = time_current, height = m_ig3b[p], i_array = m_ig3b, v_array = vg3b))

    

    '''peaksG3B = []
    peaksG2T = []
    peaksG2B = []
    peaksG1T = []
    peaksG1B = []
    peaksDRIFT = []

    for p in peaks_ig3t: peaksG3T.append(peak(entry = p, t_array = time_current, height = ig3t[p], i_array = ig3t, v_array = vg3t))
    for p in peaks_ig3b: peaksG3B.append(peak(entry = p, t_array = time_current, height = ig3b[p], i_array = ig3b, v_array = vg3b))
    for p in peaks_ig2t: peaksG2T.append(peak(entry = p, t_array = time_current, height = ig2t[p], i_array = ig2t, v_array = vg2t))
    for p in peaks_ig2b: peaksG2B.append(peak(entry = p, t_array = time_current, height = ig2b[p], i_array = ig2b, v_array = vg2b))
    for p in peaks_ig1t: peaksG1T.append(peak(entry = p, t_array = time_current, height = ig1t[p], i_array = ig1t, v_array = vg1t))
    for p in peaks_ig1b: peaksG1B.append(peak(entry = p, t_array = time_current, height = ig1b[p], i_array = ig1b, v_array = vg1b))
    for p in peaks_idrift: peaksDRIFT.append(peak(entry = p, t_array = time_current, height = idrift[p], i_array = idrift, v_array = vdrift))
    '''
    #outfile.Close()

    #outfile = ROOT.TFile.Open(outfolder+"/peaks_overview.root", "RECREATE")
        
    #simultaneous_analysis(peaksG3B, ig3t, ig2b, ig2t, ig1t, ig1b, vg3t, vg2b, vg2t, vg1b, vg1t, outfile, delta_t = 10000)
    #simultaneous_analysis(peaks_m_G3B, ig3t, ig2b, ig2t, ig1t, ig1b, vg3t, vg2b, vg2t, vg1b, vg1t, outfile, delta_t = 10000)

    #outfile.Close()

    #-TH1F  con binnaggio che riporta altezza di picco
    binning = array('f', [0, 6, 8, 10, 12, 14, 16, 18, 20, 25, 30, 35, 40, 50, 100, 1000, 5000, 10000, 50000])
    hist_heights1T = ROOT.TH1F("ndis_vs_peak_1T", "peak amplitude G1T; Peak heights [nA]; Number of discharges",len(binning)-1,  binning)
    hist_heights1B = ROOT.TH1F("ndis_vs_peak_1B", "peak amplitude G1B; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heights2T = ROOT.TH1F("ndis_vs_peak_2T", "peak amplitude G2T; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heights2B = ROOT.TH1F("ndis_vs_peak_2B", "peak amplitude G2B; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heights3T = ROOT.TH1F("ndis_vs_peak_3T", "peak amplitude G3T; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heights3B = ROOT.TH1F("ndis_vs_peak_3B", "peak amplitude G3B; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsDRIFT = ROOT.TH1F("ndis_vs_peak_DRIFT", "peak amplitude DRIFT; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsm1T = ROOT.TH1F("ndis_vs_m_peak_1T", "peak amplitude -G1T; Peak heights [nA]; Number of discharges",len(binning)-1,  binning)
    hist_heightsm1B = ROOT.TH1F("ndis_vs_m_peak_1B", "peak amplitude -G1B; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsm2T = ROOT.TH1F("ndis_vs_m_peak_2T", "peak amplitude -G2T; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsm2B = ROOT.TH1F("ndis_vs_m_peak_2B", "peak amplitude -G2B; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsm3T = ROOT.TH1F("ndis_vs_m_peak_3T", "peak amplitude -G3T; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsm3B = ROOT.TH1F("ndis_vs_m_peak_3B", "peak amplitude -G3B; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    hist_heightsmDRIFT = ROOT.TH1F("ndis_vs_m_peak_DRIFT", "peak amplitude DRIFT; Peak heights [nA]; Number of discharges",len(binning)-1, binning)
    peak_counter(hist_heights1T, properties_ig1t["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heights1B, properties_ig1b["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heights2T, properties_ig2t["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heights2B, properties_ig2b["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heights3T, properties_ig3t["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heights3B, properties_ig3b["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsDRIFT, properties_idrift["peak_heights"],  len(binning)-1, outfile, outfolder)

    peak_counter(hist_heightsm1T, properties_m_ig1t["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsm1B, properties_m_ig1b["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsm2T, properties_m_ig2t["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsm2B, properties_m_ig2b["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsm3T, properties_m_ig3t["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsm3B, properties_m_ig3b["peak_heights"],  len(binning)-1, outfile, outfolder)
    peak_counter(hist_heightsmDRIFT, properties_m_idrift["peak_heights"],  len(binning)-1, outfile, outfolder)


    outfile.Close()


else : outfile.Close()


'''
for peak in peaks_ig1b: hist_heights1T.Fill(hist_heights1T.FindBin(peak, 1)
for peak in peaks_ig2t: hist_heights1T.Fill(hist_heights1T.FindBin(peak, 1)
for peak in peaks_ig2b: hist_heights1T.Fill(hist_heights1T.FindBin(peak, 1)
for peak in peaks_ig3t: hist_heights1T.Fill(hist_heights1T.FindBin(peak, 1)
for peak in peaks_ig3b: hist_heights1T.Fill(hist_heights1T.FindBin(peak, 1)
for peak in peaks_idrift: hist_heights1T.Fill(hist_heights1T.FindBin(peak, 1)
'''
    
